{"version":3,"sources":["styleFunctions.tsx","logic/colors.tsx","components/CodePeg.tsx","components/CodeDisplay.tsx","components/ResponseDisplay.tsx","components/CodeRow.tsx","components/ColorPalette.tsx","stateMachines/codeEditorStateMachine.ts","logic/randomCode.ts","stateMachines/gameStateMachine.tsx","logic/computeResponse.ts","stateMachines/useStateMachineReducer.ts","game/Game.tsx","reportWebVitals.ts","index.tsx"],"names":["cssClass","name","styles","style","$debugName","$unique","CodeColorsDark","B","Y","P","W","G","R","CodeColorsLight","ResponseColors","white","black","ColorNames","Object","keys","CodePeg","forwardRef","props","ref","currentClass","current","undefined","color","className","classes","CodePegClass","pegGradient","disabled","onClick","EmptyCodePegClass","borderRadius","height","width","margin","background","border","outline","filter","$nest","boxShadow","darkColor","StaticCodeDisplay","CodeClass","code","map","i","EditableCodeDisplay","dispatch","type","index","currentPegIndex","display","flexDirection","ResponseDisplay","pegs","response","blacksCount","whitesCount","remainingCount","blacks","Array","from","length","whites","remaining","concat","linearize","ResponseDisplayClass","p","ResponsePeg","backgroundColor","ResponsePegClass","DotClass","marginTop","gridTemplateColumns","gridTemplateRows","alignItems","justifyItems","opacity","CodeRowLayout","CodeRowContainerClass","CodeRowIndexLabelClass","CodeRowClass","ResponseContainerClass","responseArea","codeArea","StaticCodeRow","EditableCodeRow","okButtonRef","useRef","showOKButton","every","x","useEffect","focus","dispatchToGame","dispatchToCodeEditor","OKButton","OKButtonClass","fontWeight","paddingTop","paddingLeft","paddingRight","paddingBottom","fontSize","textAlign","marginRight","padding","justifyContent","ColorPalette","ColorPaletteContainerClass","c","codeEditorStateMachine","editing","putColor","prev","action","nextCode","updateCode","nextIndex","codeLength","originalIndex","nextPegIndex","removeColor","setPegIndex","prevState","mutableCode","replacements","r","randomCode","_","Math","floor","random","randomColor","gameStateMachine","unsolved","submitGuess","guess","answer","Error","nonMatchingPegCountsInAnswer","Map","nonMatchingPegsInGuess","count","get","set","push","guessPeg","computeResponse","codesAndResponses","solved","useStateMachineReducer","stateMachine","initialState","useReducer","transition","Game","gameState","CodeListAndEditor","params","editableRowRef","codeEditorState","scrollIntoView","AppClass","CodeListClass","minHeight","maxHeight","flex","overflowY","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.32248832.chunk.js","sourcesContent":["import { style, types } from 'typestyle';\n\nexport { classes, keyframes } from 'typestyle';\n\nexport type Style = types.NestedCSSProperties;\n\nconst AppName = 'mm';\n\nexport function cssClass(name: string, ...styles: Style[]): string {\n  return style(...styles, {\n    $debugName: `${AppName}_${name}`,\n    $unique: true,\n  });\n}\n","export type CodeColor = 'P' | 'W' | 'R' | 'G' | 'Y' | 'B';\n\nexport type ResponseColor = 'white' | 'black';\n\n// The colors taken from the reference image at the darkest spot\nexport const CodeColorsDark: Record<CodeColor, string> = {\n  B: 'rgb(0, 38, 173)',\n  // Y: 'rgb(215, 199, 0)',\n  Y: 'rgb(215, 208, 0)', // custom yellow to make it stand out more from white\n  P: 'rgb(215, 0, 214)',\n  W: 'rgb(220, 219, 219)',\n  G: 'rgb(23, 170, 0)',\n  R: 'rgb(171, 0, 0)',\n};\n\n// The colors taken from the reference image at the brightest spot\nexport const CodeColorsLight: Record<CodeColor, string> = {\n  B: 'rgb(142, 167, 237)',\n  // Y: 'rgb(245, 239, 136)',\n  Y: 'rgb(246, 240, 15)', // custom yellow to make it stand out more from white\n  P: 'rgb(246, 135, 243)',\n  W: 'rgb(245, 245, 245)',\n  G: 'rgb(167, 232, 138)',\n  R: 'rgb(239, 138, 142)',\n};\n\nexport const ResponseColors: Record<ResponseColor, string> = {\n  white: 'rgb(235, 235, 235)',\n  black: 'rgb(35, 35, 35)',\n};\n\n/** The names of all the possible code colors */\nexport const ColorNames = Object.keys(\n  CodeColorsDark\n) as ReadonlyArray<CodeColor>;\n","import { forwardRef } from 'react';\nimport { CodeColor, CodeColorsLight, CodeColorsDark } from '../logic/colors';\nimport { classes, cssClass } from '../styleFunctions';\n\nexport type CodePegProps = {\n  color: CodeColor | null;\n  current?: boolean;\n  onClick?: () => void;\n};\n\nexport const CodePeg = forwardRef<HTMLButtonElement, CodePegProps>(\n  function CodePeg(props, ref) {\n    const currentClass = props.current ? 'current' : undefined;\n\n    if (props.color) {\n      return (\n        <button\n          ref={ref}\n          className={classes(CodePegClass, currentClass)}\n          style={pegGradient(props.color)}\n          disabled={!props.onClick}\n          onClick={props.onClick}\n        />\n      );\n    } else {\n      return (\n        <button\n          ref={ref}\n          className={classes(CodePegClass, EmptyCodePegClass, currentClass)}\n          disabled={!props.onClick}\n          onClick={props.onClick}\n        />\n      );\n    }\n  }\n);\n\nconst CodePegClass = cssClass('CodePeg', {\n  borderRadius: '50%',\n  height: 40,\n  width: 40,\n  margin: 8,\n  background: 'none',\n  border: 'none',\n  outline: 'none',\n  filter: 'drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.3))',\n  $nest: {\n    '&:focus': {\n      border: '3px solid #0096FF',\n    },\n    '&.current': {\n      border: '3px dashed black',\n    },\n  },\n});\n\nconst EmptyCodePegClass = cssClass('EmptyCodePeg', {\n  boxShadow: 'inset 0px -2px 24px rgba(0, 0, 0, 0.25)',\n});\n\nfunction pegGradient(color: CodeColor): React.CSSProperties {\n  const lightColor = CodeColorsLight[color];\n  const darkColor = CodeColorsDark[color];\n\n  // I have no idea what I'm doing with gradients. As a starting point, I used\n  // examples from: https://cssanimation.rocks/spheres/\n  return {\n    background: `radial-gradient(circle at 25px 15px, ${lightColor}, ${darkColor})`,\n  };\n}\n","import React, { Dispatch } from 'react';\nimport { Code } from '../logic/CodeTypes';\nimport {\n  CodeEditorAction,\n  CodeEditorState,\n} from '../stateMachines/codeEditorStateMachine';\nimport { cssClass } from '../styleFunctions';\nimport { CodePeg } from './CodePeg';\n\nexport function StaticCodeDisplay(props: { code: Code }) {\n  return (\n    <div className={CodeClass}>\n      {props.code.map((color, i) => (\n        <CodePeg key={i} color={color} />\n      ))}\n    </div>\n  );\n}\n\ntype EditableCodeDisplayProps = Pick<\n  CodeEditorState,\n  'code' | 'currentPegIndex'\n> & {\n  dispatch: Dispatch<CodeEditorAction>;\n};\n\nexport function EditableCodeDisplay(props: EditableCodeDisplayProps) {\n  return (\n    <div className={CodeClass}>\n      {props.code.map((color, i) => (\n        <CodePeg\n          key={i}\n          color={color}\n          onClick={() =>\n            props.dispatch({\n              type: color ? 'removeColor' : 'setPegIndex',\n              index: i,\n            })\n          }\n          current={props.currentPegIndex === i}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst CodeClass = cssClass('Code', {\n  display: 'flex',\n  flexDirection: 'row',\n});\n","import { GuessResponse } from '../logic/CodeTypes';\nimport { ResponseColor, ResponseColors } from '../logic/colors';\nimport { cssClass } from '../styleFunctions';\n\nexport type ResponseDisplayProps = {\n  response?: GuessResponse;\n};\n\nexport function ResponseDisplay(props: ResponseDisplayProps) {\n  const pegs = linearize(props.response);\n\n  return (\n    <div className={ResponseDisplayClass}>\n      {pegs.map((p, i) => (\n        <ResponsePeg key={i} color={p} />\n      ))}\n    </div>\n  );\n}\n\nfunction linearize(\n  response?: GuessResponse\n): ReadonlyArray<ResponseColor | null> {\n  const blacksCount = response?.black ?? 0;\n  const whitesCount = response?.white ?? 0;\n  const remainingCount = 4 - blacksCount - whitesCount;\n\n  const blacks = Array.from({ length: blacksCount }, () => 'black') as [\n    ResponseColor | null\n  ];\n  const whites = Array.from({ length: whitesCount }, () => 'white') as [\n    ResponseColor | null\n  ];\n  const remaining = Array.from({ length: remainingCount }, () => null);\n\n  return blacks.concat(whites).concat(remaining);\n}\n\nfunction ResponsePeg({ color }: { color: ResponseColor | null }) {\n  if (color) {\n    const backgroundColor = ResponseColors[color];\n    return <div className={ResponsePegClass} style={{ backgroundColor }} />;\n  } else {\n    return <div className={DotClass} />;\n  }\n}\n\nconst ResponseDisplayClass = cssClass('ResponseDisplay', {\n  marginTop: 2, // to look even with the code pegs' drop shadow\n  display: 'grid',\n  gridTemplateColumns: '50% 50%',\n  gridTemplateRows: '50% 50%',\n  width: '100%',\n  height: '100%',\n  alignItems: 'center',\n  justifyItems: 'center',\n});\n\nconst DotClass = cssClass('Dot', {\n  borderRadius: '50%',\n  width: 5,\n  height: 5,\n  backgroundColor: 'black',\n  opacity: 0.2,\n});\n\nconst ResponsePegClass = cssClass('ResponsePeg', {\n  borderRadius: '50%',\n  width: 10,\n  height: 10,\n  filter: 'drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.5))',\n});\n","import React, {\n  Dispatch,\n  forwardRef,\n  ReactNode,\n  useEffect,\n  useRef,\n} from 'react';\nimport { GuessResponse, Code } from '../logic/CodeTypes';\nimport {\n  CodeEditorAction,\n  CodeEditorState,\n} from '../stateMachines/codeEditorStateMachine';\nimport { GameAction } from '../stateMachines/gameStateMachine';\nimport { cssClass } from '../styleFunctions';\nimport { StaticCodeDisplay, EditableCodeDisplay } from './CodeDisplay';\nimport { ResponseDisplay } from './ResponseDisplay';\n\ntype StaticCodeRowProps = {\n  index: number;\n  code: Code;\n  response: GuessResponse;\n};\n\ntype EditableCodeRowProps = Pick<\n  CodeEditorState,\n  'code' | 'currentPegIndex'\n> & {\n  index: number;\n  dispatchToCodeEditor: Dispatch<CodeEditorAction>;\n  dispatchToGame: Dispatch<GameAction>;\n};\n\ntype CodeRowLayoutProps = {\n  index: number;\n  responseArea: ReactNode;\n  codeArea: ReactNode;\n};\n\nconst CodeRowLayout = forwardRef<HTMLDivElement, CodeRowLayoutProps>(\n  function CodeRowLayout(props, ref) {\n    return (\n      <div ref={ref} className={CodeRowContainerClass}>\n        <label className={CodeRowIndexLabelClass}>{props.index}</label>\n        <div className={CodeRowClass}>\n          <div className={ResponseContainerClass}>{props.responseArea}</div>\n          {props.codeArea}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport function StaticCodeRow(props: StaticCodeRowProps) {\n  return (\n    <CodeRowLayout\n      index={props.index}\n      responseArea={<ResponseDisplay response={props.response} />}\n      codeArea={<StaticCodeDisplay code={props.code} />}\n    />\n  );\n}\n\nexport const EditableCodeRow = forwardRef<HTMLDivElement, EditableCodeRowProps>(\n  function EditableCodeRow(props, ref) {\n    const okButtonRef = useRef<HTMLButtonElement>(null);\n    const showOKButton = props.code.every((x) => x !== null);\n\n    // Focus the OK button when it appears\n    useEffect(() => {\n      if (showOKButton && okButtonRef.current) {\n        okButtonRef.current.focus();\n      }\n    }, [showOKButton]);\n\n    const responseArea = showOKButton ? (\n      <OKButton\n        ref={okButtonRef}\n        onClick={() =>\n          props.dispatchToGame({\n            type: 'submitGuess',\n            code: props.code as Code,\n          })\n        }\n      />\n    ) : (\n      <ResponseDisplay />\n    );\n\n    const codeArea = (\n      <EditableCodeDisplay\n        code={props.code}\n        currentPegIndex={props.currentPegIndex}\n        dispatch={props.dispatchToCodeEditor}\n      />\n    );\n\n    return (\n      <CodeRowLayout\n        ref={ref}\n        index={props.index}\n        responseArea={responseArea}\n        codeArea={codeArea}\n      />\n    );\n  }\n);\n\ntype OKButtonProps = {\n  onClick: () => void;\n};\n\nconst OKButton = forwardRef<HTMLButtonElement, OKButtonProps>(function OKButton(\n  props,\n  ref\n) {\n  return (\n    <button ref={ref} className={OKButtonClass} onClick={props.onClick}>\n      OK\n    </button>\n  );\n});\n\nconst OKButtonClass = cssClass('OKButton', {\n  width: '100%',\n  height: 40,\n  borderRadius: 10,\n  border: 'none',\n  backgroundColor: '#3AD819',\n  boxShadow: '0 1px 7px rgba(0, 0, 0, 0.3)',\n  $nest: {\n    '&:hover': {\n      backgroundColor: '#3DE51B',\n    },\n    '&:focus': {\n      backgroundColor: '#3DE51B',\n      outline: 'none',\n      border: '2px solid #0096FF',\n    },\n    '&:active': {\n      backgroundColor: '#3AD819',\n    },\n  },\n  fontWeight: 'bold',\n});\n\nconst CodeRowContainerClass = cssClass('CodeRowContainer', {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  paddingTop: 10,\n  paddingLeft: 10,\n  paddingRight: 20,\n  $nest: {\n    '&:first-child': {\n      paddingBottom: 10,\n    },\n  },\n});\n\nconst CodeRowIndexLabelClass = cssClass('CodeRowIndexLabel', {\n  color: 'rgba(0, 0, 0, 0.4)',\n  fontSize: '42px',\n  width: 30,\n  textAlign: 'center',\n  marginRight: 10,\n});\n\nconst CodeRowClass = cssClass('CodeRow', {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  padding: '10px 15px 10px 15px',\n  borderRadius: 8,\n  boxShadow: 'inset 0px 0px 10px rgba(0, 0, 0, 0.4)',\n});\n\nconst ResponseContainerClass = cssClass('ResponseContainer', {\n  width: 42,\n  height: 42,\n  marginRight: 10,\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n});\n","import { Dispatch } from 'react';\nimport { ColorNames } from '../logic/colors';\nimport { CodeEditorAction } from '../stateMachines/codeEditorStateMachine';\nimport { cssClass } from '../styleFunctions';\nimport { CodePeg } from './CodePeg';\n\ntype ColorPaletteProps = {\n  dispatch: Dispatch<CodeEditorAction>;\n};\n\nexport function ColorPalette(props: ColorPaletteProps) {\n  return (\n    <div className={ColorPaletteContainerClass}>\n      {ColorNames.map((c) => (\n        <CodePeg\n          key={c}\n          color={c}\n          onClick={() => props.dispatch({ type: 'putColor', color: c })}\n        />\n      ))}\n    </div>\n  );\n}\n\nconst ColorPaletteContainerClass = cssClass('ColorPaletteContainer', {\n  display: 'flex',\n  flexDirection: 'row',\n  alignItems: 'center',\n  padding: '10px 15px 10px 15px',\n  marginTop: 10,\n});\n","import { PartialCode } from '../logic/CodeTypes';\nimport { CodeColor } from '../logic/colors';\nimport { StateMachineObject } from './useStateMachineReducer';\n\nexport type CodeEditorState = {\n  readonly name: 'editing';\n  readonly codeLength: number;\n  readonly code: PartialCode;\n  readonly currentPegIndex: number | null;\n};\n\nexport type CodeEditorAction =\n  | {\n      readonly type: 'putColor';\n      readonly index?: number;\n      readonly color: CodeColor;\n    }\n  | {\n      readonly type: 'removeColor';\n      readonly index?: number;\n    }\n  | {\n      readonly type: 'setPegIndex';\n      readonly index: number;\n    };\n\nexport function getInitialCodeEditorState(params: {\n  codeLength: number;\n}): CodeEditorState {\n  return {\n    name: 'editing',\n    codeLength: params.codeLength,\n    code: Array.from(new Array(params.codeLength)).map((_) => null),\n    currentPegIndex: 0,\n  };\n}\n\nexport const codeEditorStateMachine: StateMachineObject<\n  CodeEditorState,\n  CodeEditorAction\n> = {\n  editing: {\n    putColor: (prev, action) => {\n      const index = action.index ?? prev.currentPegIndex;\n      if (index === null) {\n        return prev;\n      }\n\n      const nextCode = updateCode(prev, { index, color: action.color });\n      const nextIndex = nextPegIndex(nextCode, prev.codeLength, index);\n      return {\n        ...prev,\n        code: nextCode,\n        currentPegIndex: nextIndex,\n      };\n    },\n\n    removeColor: (prev, action) => {\n      const index = action.index ?? prev.currentPegIndex;\n      if (index === null) {\n        return prev;\n      }\n\n      const nextCode = updateCode(prev, { index, color: null });\n      return {\n        ...prev,\n        code: nextCode,\n        currentPegIndex: index,\n      };\n    },\n\n    setPegIndex: (prev, action) => {\n      return {\n        ...prev,\n        currentPegIndex: action.index,\n      };\n    },\n  },\n};\n\n/**\n * Returns an incremented peg index. Chooses the next index with no peg color,\n * wrapping around to the beginning of the code if necessary. If all the pegs\n * are filled, returns null.\n */\nfunction nextPegIndex(\n  code: PartialCode,\n  codeLength: number,\n  originalIndex: number\n): number | null {\n  let nextIndex = originalIndex;\n  do {\n    nextIndex = (nextIndex + 1) % codeLength;\n    const pegAtIndex = code[nextIndex];\n    if (!pegAtIndex) {\n      return nextIndex;\n    }\n  } while (nextIndex !== originalIndex);\n  return null;\n}\n\nfunction updateCode(\n  prevState: CodeEditorState,\n  ...replacements: { index: number; color: CodeColor | null }[]\n): PartialCode {\n  const mutableCode = [...prevState.code];\n  for (const r of replacements) {\n    if (r.index >= 0 && r.index < prevState.codeLength) {\n      mutableCode[r.index] = r.color;\n    }\n  }\n  return mutableCode;\n}\n","import { Code } from './CodeTypes';\nimport { ColorNames } from './colors';\n\nfunction randomColor() {\n  const i = Math.floor(Math.random() * ColorNames.length);\n  return ColorNames[i];\n}\n\nexport function randomCode(codeLength: number): Code {\n  return Array.from(new Array(codeLength)).map((_) => randomColor());\n}\n","import { Code, GuessResponse } from '../logic/CodeTypes';\nimport { computeResponse } from '../logic/computeResponse';\nimport { randomCode } from '../logic/randomCode';\nimport { StateMachineObject } from './useStateMachineReducer';\n\nexport type GameState = {\n  readonly name: 'unsolved' | 'solved';\n  readonly answer: Code;\n  readonly codesAndResponses: ReadonlyArray<{\n    readonly code: Code;\n    readonly response: GuessResponse;\n  }>;\n};\n\nexport type GameAction = {\n  readonly type: 'submitGuess';\n  readonly code: Code;\n};\n\nexport function getInitialGameState({\n  codeLength,\n}: {\n  codeLength: number;\n}): GameState {\n  return {\n    name: 'unsolved',\n    answer: randomCode(codeLength),\n    codesAndResponses: [],\n  };\n}\n\nexport const gameStateMachine: StateMachineObject<GameState, GameAction> = {\n  unsolved: {\n    submitGuess: (prev, action) => {\n      const response = computeResponse({\n        guess: action.code,\n        answer: prev.answer,\n      });\n\n      return {\n        ...prev,\n        codesAndResponses: [\n          ...prev.codesAndResponses,\n          { code: action.code, response },\n        ],\n      };\n    },\n  },\n  solved: {},\n};\n","import { Code, GuessResponse } from './CodeTypes';\nimport { CodeColor } from './colors';\n\nexport function computeResponse({\n  guess,\n  answer,\n}: {\n  guess: Code;\n  answer: Code;\n}): GuessResponse {\n  if (guess.length !== answer.length) {\n    throw new Error('Expected guess and answer to be the same length');\n  }\n\n  const nonMatchingPegCountsInAnswer = new Map<CodeColor, number>();\n  const nonMatchingPegsInGuess = [];\n\n  let black = 0;\n  let white = 0;\n\n  // First, find all the exact matches, and put everything else into a map\n  for (let i = 0; i < guess.length; i++) {\n    if (guess[i] === answer[i]) {\n      black++;\n    } else {\n      const count = nonMatchingPegCountsInAnswer.get(answer[i]) ?? 0;\n      nonMatchingPegCountsInAnswer.set(answer[i], count + 1);\n      nonMatchingPegsInGuess.push(guess[i]);\n    }\n  }\n\n  // We know whatever's left is in the wrong place, so count\n  // the number of guess pegs that correspond to an answer peg.\n  for (const guessPeg of guess) {\n    const count = nonMatchingPegCountsInAnswer.get(guessPeg) ?? 0;\n    if (count > 0) {\n      white++;\n      nonMatchingPegCountsInAnswer.set(guessPeg, count - 1);\n    }\n  }\n\n  return { black, white };\n}\n","import { useReducer } from 'react';\n\n/**\n * Type definition for a state machine, which enforces that the keys\n * match the state names and actions. All states must be present, but\n * a state need not respond to all actions.\n */\nexport type StateMachineObject<\n  S extends { name: string },\n  A extends { type: string }\n> = {\n  [StateName in S['name']]: {\n    [ActionType in A['type']]?: (\n      prevState: { name: StateName } & S,\n      action: { type: ActionType } & A\n    ) => S;\n  };\n};\n\n/**\n * Uses a state machine to manage state, as one would use a reducer.\n * @param stateMachine\n * @param initialState\n */\nexport function useStateMachineReducer<\n  StateName extends string,\n  ActionType extends string,\n  S extends { name: StateName },\n  A extends { type: ActionType }\n>(stateMachine: StateMachineObject<S, A>, initialState: S) {\n  const reducer = (prev: S, action: A): S => {\n    const transition = stateMachine[prev.name][action.type];\n    return transition ? transition(prev, action) : prev;\n  };\n  return useReducer(reducer, initialState);\n}\n","import React, { Dispatch, useEffect, useRef } from 'react';\nimport { StaticCodeRow, EditableCodeRow } from '../components/CodeRow';\nimport { ColorPalette } from '../components/ColorPalette';\nimport {\n  codeEditorStateMachine,\n  getInitialCodeEditorState,\n} from '../stateMachines/codeEditorStateMachine';\nimport {\n  GameAction,\n  GameState,\n  gameStateMachine,\n  getInitialGameState,\n} from '../stateMachines/gameStateMachine';\nimport { useStateMachineReducer } from '../stateMachines/useStateMachineReducer';\nimport { cssClass } from '../styleFunctions';\n\nconst CODE_LENGTH = 4;\n\nexport function Game() {\n  const [gameState, dispatchToGame] = useStateMachineReducer(\n    gameStateMachine,\n    getInitialGameState({ codeLength: CODE_LENGTH })\n  );\n\n  // Every time a new code gets added, reïnitialize the component that\n  // keeps the code editor state\n  return (\n    <CodeListAndEditor\n      key={gameState.codesAndResponses.length}\n      gameState={gameState}\n      dispatchToGame={dispatchToGame}\n    />\n  );\n}\n\ntype CodeListAndEditorProps = {\n  gameState: GameState;\n  dispatchToGame: Dispatch<GameAction>;\n};\n\nfunction CodeListAndEditor(props: CodeListAndEditorProps) {\n  const editableRowRef = useRef<HTMLDivElement>(null);\n\n  const [codeEditorState, dispatchToCodeEditor] = useStateMachineReducer(\n    codeEditorStateMachine,\n    getInitialCodeEditorState({ codeLength: CODE_LENGTH })\n  );\n\n  useEffect(() => {\n    if (editableRowRef.current) {\n      editableRowRef.current.scrollIntoView();\n    }\n  }, []);\n\n  return (\n    <div className={AppClass}>\n      <div className={CodeListClass}>\n        {props.gameState.codesAndResponses.map(({ code, response }, i) => (\n          <StaticCodeRow\n            key={i + 1}\n            index={i + 1}\n            code={code}\n            response={response}\n          />\n        ))}\n        <EditableCodeRow\n          ref={editableRowRef}\n          index={props.gameState.codesAndResponses.length + 1}\n          code={codeEditorState.code}\n          currentPegIndex={codeEditorState.currentPegIndex}\n          dispatchToCodeEditor={dispatchToCodeEditor}\n          dispatchToGame={props.dispatchToGame}\n        />\n      </div>\n      <ColorPalette dispatch={dispatchToCodeEditor} />\n    </div>\n  );\n}\n\nconst AppClass = cssClass('App', {\n  backgroundColor: 'rgb(141, 86, 47)',\n  minHeight: '100vh',\n  maxHeight: '100vh',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n});\n\nconst CodeListClass = cssClass('CodeList', {\n  flex: 1,\n  display: 'flex',\n  overflowY: 'auto',\n  flexDirection: 'column-reverse',\n  justifyContent: 'flex-start',\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Game } from './game/Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Game />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}